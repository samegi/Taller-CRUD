{
  "info": {
    "name": "CRUD Creatures",
    "_postman_id": "f2b4c8d1-aaaa-bbbb-cccc-ddddeeeee000",
    "description": "Colección para probar el CRUD de criaturas. Primero usar POST, luego los otros métodos.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "POST - Crear Criatura",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}{{apiBase}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "{{apiBase}}"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"nombre\": \"Grifo Dorado {{unique}}\",\n  \"tipo\": \"Ave mítica\",\n  \"nivelPoder\": 88,\n  \"estado\": \"Normal\"\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status es 200 o 201\", () => pm.expect([200,201]).to.include(pm.response.code));",
              "let json = {};",
              "try { json = pm.response.json(); } catch(e) {}",
              "let id = json?.id || json?.data?.id;",
              "// intenta desde Location si no viene en el body",
              "if (!id) {",
              "  const loc = pm.response.headers.get(\"Location\");",
              "  id = loc?.match(/\\/(\\d+)(?:\\?.*)?$/)?.[1];",
              "}",
              "pm.expect(id, \"La respuesta no entregó id\").to.exist;",
              "const path = pm.request.url.path.join(\"/\");",
              "if (path.includes(\"zones\")) {",
              "  pm.collectionVariables.set(\"zoneId\", id);",
              "} else if (path.includes(\"creatures\")) {",
              "  pm.collectionVariables.set(\"creatureId\", id);",
              "}"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.collectionVariables.set(\"unique\", Date.now());"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "GET - Lista de Criaturas",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}{{apiBase}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "{{apiBase}}"
          ]
        }
      }
    },
    {
      "name": "GET - Criatura por ID",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}{{apiBase}}/{{creatureId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "{{apiBase}}",
            "{{creatureId}}"
          ]
        }
      }
    },
    {
      "name": "PUT - Actualizar Criatura",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}{{apiBase}}/{{creatureId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "{{apiBase}}",
            "{{creatureId}}"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"nombre\": \"Grifo Real\",\n  \"tipo\": \"Ave mítica\",\n  \"nivelPoder\": 95,\n  \"estado\": \"Normal\"\n}"
        }
      }
    },
    {
      "name": "DELETE - Eliminar Criatura",
      "request": {
        "method": "DELETE",
        "url": {
          "raw": "{{baseUrl}}{{apiBase}}/{{creatureId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "{{apiBase}}",
            "{{creatureId}}"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"DELETE ok (200/204)\", () => pm.expect([200,204]).to.include(pm.response.code));",
              "const path = pm.request.url.path.join(\"/\");",
              "if (path.includes(\"zones\")) {",
              "  pm.collectionVariables.unset(\"zoneId\");",
              "} else if (path.includes(\"creatures\")) {",
              "  pm.collectionVariables.unset(\"creatureId\");",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "apiBase",
      "value": "/api/creatures",
      "type": "string"
    },
    {
      "key": "creatureId",
      "value": "",
      "type": "string"
    }
  ]
}
